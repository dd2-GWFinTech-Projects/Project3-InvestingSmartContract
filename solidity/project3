// SPDX-License-Identifier: MIT
pragma solidity ^0.7.4;
pragma experimental ABIEncoderV2;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/token/ERC721/ERC721Full.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/drafts/Counters.sol";

// TODO - contract name
contract PorfolioX is ERC721Full {
    constructor() ERC721Full() public { } // TODO - formal parameters
    
    using Counters for Counters.Counter;
    Counters.Counter token_ids;

    struct Portfolio {
        string date; // maybe uint or long
        string industry_data;
    }
    
    mapping(uint => Portfolio) public portfolios;
    mapping(uint => string) public portfolio_strings;
    
    // -------------------------------------------------------------------------
    // String-based portfolio map functions
    // -------------------------------------------------------------------------

    function registerPortfolioString(uint id, string memory portfolio_str) public returns(bool) {
      /** @dev Registers a portfolio allocation in string form.
        * @param id The portfolio id.
        * @param portfolio The recommended portfolio allocations in string form.
        * @return result True if success; false if string is empty.
        */
        // TODO Error handling - return fals if empty string.
        portfolio_strings[id] = portfolio_str;
        return true;
    }

    function getPortfolioString(uint id) public returns(string memory) {
      /** @dev Retrieves a previously-registered portfolio allocation.
        * @param id The portfolio id.
        * @return portfolio The recommended portfolio allocations in string form; empty string if no portfolio registered with the id.
        */
        // TODO Error handling.
        return portfolio_strings[id];
    }
    
    
    // -------------------------------------------------------------------------
    // Struct-based portfolio map functions
    // -------------------------------------------------------------------------

    function registerPortfolio(uint id, Portfolio memory portfolio) public returns(bool) {
      /** @dev Registers a portfolio allocation.
        * @param id The portfolio id.
        * @param portfolio The recommended portfolio allocation.
        * @return result Success indicator.
        */
        portfolios[id] = portfolio;
        return true;
    }

    function getPortfolio(uint id) public returns(Portfolio memory) {
      /** @dev Retrieves a previously-registered portfolio allocation.
        * @param id The portfolio id.
        * @return portfolio The recommended portfolio allocation.
        */
        return portfolios[id];
    }

    // NOTES
    // Receive JSON object to contract
    // Store struct on chain
    // Error checking to revert changes, if invalid values are found in JSON

    /*
    {
        “id”:1,
        “date”:“2021-01-02”,
        “assets”: [
            {
                “asset_name”:“TSLA”,
                “allocation”:100
            },
            {
                “asset_name”:“AAPL”,
                “allocation”:50
            }
        ]
    }

    event Portfolio(uint token_id, string portfolio_uri);
    
    function registerPortfolio(address owner, string date, string industry, string portfolio_uri) public returns(uint) {
        token_ids.increment();
        uint token_id = token_ids.current();
        
        _mint(owner,token_id);
        _setTokenURI(token_id,portfolio_uri);
        
        portfolios[token_id] = Portfolio(date,industry,areturn,sratio,volatility);
        emit Portfolio(token_id, portfolio_uri);
        
        return token_id;
    }
    */
    
    
}