// SPDX-License-Identifier: MIT
pragma solidity ^0.5.5;
//pragma experimental ABIEncoderV2;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/token/ERC721/ERC721Full.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/drafts/Counters.sol";

contract PorfolioCoin is ERC721Full {
    constructor() ERC721Full("Portfolio","PFC") public { } // TODO - formal parameters
    
    using Counters for Counters.Counter;
    Counters.Counter token_ids;

    // use token_id to access / update portfolios
    struct Portfolio {
        string date; 
        string name;
        string test; // for testing
    }
    
    mapping(uint => Portfolio) public portfolios;

    event submitPortfolio(uint token_id, string portfolio_uri);
    
    function createPortfolio(address owner, string memory date, string memory name, string memory portfolio_uri) public returns(uint) {
        token_ids.increment();
        uint token_id = token_ids.current();
        
        _mint(owner,token_id);
        _setTokenURI(token_id,portfolio_uri);
        
        //portfolios[token_id] = Portfolio(date,industry,areturn,sratio,volatility);
        portfolios[token_id] = Portfolio(date, name, "");
        
        return token_id;
    }

    // experimental, for testing
    function registerPortfolio(uint token_id, string memory portfolio_uri, string memory tester) public returns(string memory) {
        portfolios[token_id].test=tester;
        
        emit submitPortfolio(token_id,portfolio_uri);
        
        return portfolios[token_id].test; // for testing
    }
}